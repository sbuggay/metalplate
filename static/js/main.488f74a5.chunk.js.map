{"version":3,"sources":["state/state.ts","components/StatusControl.tsx","components/OrderModal.tsx","components/BusinessCard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["EStatus","EPriority","id","status","index","this","orders","findIndex","value","companies","name","phone","email","company","tag","Nothing","priority","GetOut","pounds","hook","dateEnd","Date","Ready","Loading","Pickups","Working","Tied","WaitOn","description","filter","order","Loaded","observable","computed","stages","icon","Inside","getLabel","StatusControl","props","style","paddingRight","Button","Group","getColor","undefined","map","stage","Popup","content","key","trigger","color","onClick","state","updateStatus","Icon","buttons","Label","basic","useInput","initialValue","useState","setValue","reset","bind","onChange","event","data","target","OrderModal","observer","bindCompany","bindTag","bindPounds","resetPounds","bindPriority","bindHook","companyOptions","Object","values","text","handleClose","orderModelOpen","priorityOptions","None","Shipping","Modal","dimmer","open","onClose","closeIcon","Header","Content","Form","Dropdown","required","fluid","selection","label","options","Input","defaultValue","Checkbox","TextArea","Actions","positive","push","BusinessCard","Card","Meta","Description","extra","App","Table","Row","negative","Cell","ribbon","on","position","cursor","getPriorityString","toDateString","textAlign","completedOrders","length","as","compact","HeaderCell","Body","orderRows","marginTop","Container","Menu","pointing","Item","active","floated","primary","openOrders","Component","Boolean","window","location","hostname","match","mock","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.488f74a5.chunk.js","sourcesContent":["import { observable, computed } from \"mobx\";\r\n\r\nexport interface ICompany {\r\n    id: number;\r\n    name: string;\r\n    avatar?: string;\r\n    phone?: string;\r\n    email?: string;\r\n}\r\n\r\nexport enum EStatus {\r\n    Nothing,\r\n    Working,\r\n    Tied,\r\n    Inside,\r\n    Ready,\r\n    Loaded\r\n}\r\n\r\nexport enum EPriority {\r\n    WaitOn,\r\n    Pickups,\r\n    Shipping,\r\n    Loading,\r\n    GetOut,\r\n    None\r\n}\r\n\r\nexport interface IOrder {\r\n    id: number;\r\n    company: string;\r\n    status: EStatus;\r\n    tag?: string;\r\n    hook?: boolean;\r\n    pounds: number;\r\n    dateStart?: Date;\r\n    dateEnd?: Date;\r\n    description?: string;\r\n    priority: EPriority;\r\n    complete?: boolean;\r\n}\r\n\r\nclass State {\r\n    @observable companies: { [key: string]: ICompany } = {};\r\n    @observable orders: IOrder[] = [];\r\n    @observable orderModelOpen: boolean = false;\r\n    id: number = 141;\r\n\r\n    @computed get openOrders() {\r\n        return this.orders.filter(order => !(order.status === EStatus.Loaded));\r\n    }\r\n\r\n    @computed get completedOrders() {\r\n        return this.orders.filter(order => (order.status === EStatus.Loaded));\r\n    }\r\n\r\n    updateStatus(id: number, status: EStatus) {\r\n        const index = this.orders.findIndex(value => value.id === id);\r\n\r\n        if (index === -1) return;\r\n\r\n        this.orders[index] = { ...this.orders[index], status };\r\n    }\r\n\r\n    mock() {\r\n        this.companies = {\r\n            \"Microsoft\": {\r\n                id: 0,\r\n                name: \"Microsoft\",\r\n                phone: \"123-123-1234\"\r\n            },\r\n            \"Apple\": {\r\n                id: 1,\r\n                name: \"Apple\",\r\n                phone: \"123-123-1234\",\r\n                email: \"email@apple.com\"\r\n            },\r\n            \"Google\": {\r\n                id: 2,\r\n                name: \"Google\",\r\n                phone: \"123-123-1234\",\r\n                email: \"email@apple.com\"\r\n            }\r\n        }\r\n\r\n        this.orders = [\r\n            {\r\n                id: 132,\r\n                company: \"Microsoft\",\r\n                tag: \"22A\",\r\n                status: EStatus.Nothing,\r\n                priority: EPriority.GetOut,\r\n                pounds: 1000,\r\n                hook: false,\r\n                dateEnd: new Date(\"Mon Oct 12 2020 00:28:14 GMT-0700 (Pacific Daylight Time)\"),\r\n            },\r\n            {\r\n                id: 133,\r\n                company: \"Google\",\r\n                tag: \"23A\",\r\n                status: EStatus.Ready,\r\n                pounds: 500,\r\n                hook: true,\r\n                priority: EPriority.Loading,\r\n                dateEnd: new Date(\"Mon Oct 12 2020 00:28:14 GMT-0700 (Pacific Daylight Time)\"),\r\n            },\r\n            {\r\n                id: 134,\r\n                company: \"Apple\",\r\n                tag: \"24A\",\r\n                status: EStatus.Nothing,\r\n                priority: EPriority.Pickups,\r\n                pounds: 2000,\r\n                hook: false,\r\n                dateEnd: new Date(\"Mon Oct 12 2020 00:28:14 GMT-0700 (Pacific Daylight Time)\"),\r\n            },\r\n            {\r\n                id: 135,\r\n                company: \"CompanyA\",\r\n                tag: \"25B\",\r\n                status: EStatus.Working,\r\n                priority: EPriority.GetOut,\r\n                pounds: 1000,\r\n                hook: false,\r\n                dateEnd: new Date(\"Mon Oct 12 2020 00:28:14 GMT-0700 (Pacific Daylight Time)\"),\r\n            },\r\n            {\r\n                id: 137,\r\n                company: \"CompanyA\",\r\n                tag: \"25C\",\r\n                status: EStatus.Tied,\r\n                priority: EPriority.WaitOn,\r\n                pounds: 5000,\r\n                hook: true,\r\n                dateEnd: new Date(\"Mon Oct 12 2020 00:28:14 GMT-0700 (Pacific Daylight Time)\"),\r\n            },\r\n            {\r\n                id: 140,\r\n                company: \"CompanyB\",\r\n                tag: \"26A\",\r\n                status: EStatus.Tied,\r\n                pounds: 100,\r\n                hook: false,\r\n                priority: EPriority.GetOut,\r\n                dateEnd: new Date(\"Mon Oct 12 2020 00:28:14 GMT-0700 (Pacific Daylight Time)\"),\r\n                description: \"<Some important info>\"\r\n            }\r\n        ]\r\n    }\r\n\r\n}\r\n\r\nexport default new State();","import React, { Component } from \"react\";\r\nimport { Button, Icon, SemanticCOLORS, Popup, Label } from \"semantic-ui-react\";\r\n\r\nimport state, { EStatus, IOrder } from \"../state/state\";\r\n\r\n\r\nconst stages = [\r\n    {\r\n        name: \"inbox\",\r\n        icon: true,\r\n        status: EStatus.Nothing\r\n    },\r\n    {\r\n        name: \"1\",\r\n        icon: false,\r\n        status: EStatus.Working\r\n    },\r\n    {\r\n        name: \"2\",\r\n        icon: false,\r\n        status: EStatus.Tied\r\n    },\r\n    {\r\n        name: \"3\",\r\n        icon: false,\r\n        status: EStatus.Inside\r\n    },\r\n    {\r\n        name: \"4\",\r\n        icon: false,\r\n        status: EStatus.Ready\r\n    },\r\n    {\r\n        name: \"truck\",\r\n        icon: true,\r\n        status: EStatus.Loaded\r\n    },\r\n];\r\n\r\nfunction getLabel(index: EStatus) {\r\n    switch (index) {\r\n        case 0:\r\n            return \"Nothing\";\r\n        case 1:\r\n            return \"Working\";\r\n        case 2:\r\n            return \"Tied\";\r\n        case 3:\r\n            return \"Inside\";\r\n        case 4:\r\n            return \"Ready\";\r\n        case 5:\r\n            return \"Loaded\";\r\n        default:\r\n            return \"Unknown\";\r\n    }\r\n}\r\n\r\nfunction buttons(order: IOrder) {\r\n\r\n    function getColor(index: EStatus): SemanticCOLORS | undefined {\r\n        if (index === order.status + 1) return \"yellow\";\r\n        return index < order.status + 1 ? \"green\" : undefined;\r\n    }\r\n\r\n    return stages.map((stage, index) => {\r\n        return <Popup\r\n            content={getLabel(stage.status)}\r\n            key={index}\r\n            trigger={<Button\r\n                color={getColor(index)}\r\n                onClick={() => state.updateStatus(order.id, stage.status)}\r\n                icon={stage.icon}>\r\n                {stage.icon ? <Icon name={stage.name as any} /> : stage.name}\r\n            </Button>}\r\n        />\r\n    });\r\n}\r\n\r\nexport const StatusControl: React.FunctionComponent<{ order: IOrder }> = (props) => {\r\n    return (\r\n        <span>\r\n            <span style={{ paddingRight: \"16px\" }}>{getLabel(props.order.status)}</span>\r\n            <Button.Group style={{ paddingRight: \"16px\" }}>\r\n                {buttons(props.order)}\r\n            </Button.Group>\r\n            <Button.Group>\r\n                {props.order.hook === true ? <Label color=\"green\">HR</Label> : <Label basic>HR</Label>}\r\n\r\n            </Button.Group>\r\n        </span>\r\n    );\r\n}","\r\n\r\nimport React, { useState } from \"react\";\r\nimport { Modal, Button, Form, DropdownItemProps, Icon } from \"semantic-ui-react\";\r\n\r\nimport { DateTimeInput } from \"semantic-ui-calendar-react\";\r\nimport { observer } from \"mobx-react\";\r\nimport state, { IOrder, EStatus, EPriority } from \"../state/state\";\r\n\r\ninterface IOrderModal {\r\n    open: boolean;\r\n    order?: IOrder;\r\n}\r\n\r\nexport const useInput = (initialValue: any) => {\r\n    const [value, setValue] = useState(initialValue);\r\n\r\n    return {\r\n        value,\r\n        setValue,\r\n        reset: () => setValue(\"\"),\r\n        bind: {\r\n            value,\r\n            onChange: (event: React.ChangeEvent<any>, data: any) => {\r\n                if (data && data.value) {\r\n                    setValue(data.value);\r\n                    return;\r\n                }\r\n                setValue(event.target.value);\r\n            }\r\n        }\r\n    };\r\n};\r\n\r\n\r\nexport const OrderModal: React.FunctionComponent<IOrderModal> = observer((props) => {\r\n\r\n    const { value: company, bind: bindCompany, reset: resetCompany } = useInput(props.order?.company);\r\n    const { value: tag, bind: bindTag, reset: resetTag } = useInput(props.order?.tag);\r\n    const { value: pounds, bind: bindPounds, reset: resetPounds } = useInput(props.order?.pounds);\r\n    const { value: priority, bind: bindPriority, reset: resetPriority } = useInput(props.order?.priority);\r\n    const { value: hook, bind: bindHook, reset: resetHook } = useInput(props.order?.hook);\r\n    const { value: notes, bind: bindNotes, reset: resetNotes } = useInput(props.order?.description);\r\n\r\n\r\n    const companyOptions: DropdownItemProps[] = Object.values(state.companies).map(company => {\r\n        return {\r\n            key: company.name,\r\n            text: company.name,\r\n            value: company.name\r\n        }\r\n    });\r\n\r\n    const handleClose = () => {\r\n        resetPounds();\r\n        state.orderModelOpen = false;\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        state.orders.push({\r\n            id: state.id++,\r\n            tag,\r\n            company,\r\n            pounds,\r\n            priority,\r\n            hook,\r\n            status: EStatus.Nothing,\r\n        });\r\n        handleClose();\r\n    }\r\n\r\n    const priorityOptions: DropdownItemProps[] = [\r\n        {\r\n            text: \"None\",\r\n            value: EPriority.None\r\n        },\r\n        {\r\n            text: \"Get Out\",\r\n            value: EPriority.GetOut\r\n        },\r\n        {\r\n            text: \"Loading\",\r\n            value: EPriority.Loading\r\n        },\r\n        {\r\n            text: \"Picksups\",\r\n            value: EPriority.Pickups\r\n        },\r\n        {\r\n            text: \"Wait On\",\r\n            value: EPriority.WaitOn\r\n        },\r\n        {\r\n            text: \"Shipping\",\r\n            value: EPriority.Shipping\r\n        }\r\n    ]\r\n\r\n    return (\r\n        <Modal\r\n            dimmer={\"blurring\"}\r\n            open={props.open}\r\n            onClose={() => handleClose()}\r\n            closeIcon\r\n        >\r\n            <Modal.Header>New Order</Modal.Header>\r\n            <Modal.Content>\r\n                <Form>\r\n                    <Form.Dropdown required fluid selection label=\"Company\" options={companyOptions} {...bindCompany} />\r\n                    <Form.Input label=\"Tag\" {...bindTag}></Form.Input>\r\n                    <Form.Input required label=\"Pounds (lb)\" {...bindPounds} />\r\n                    <Form.Dropdown required fluid selection label=\"Priority\" defaultValue={5} options={priorityOptions} {...bindPriority} />\r\n                    <Form.Checkbox label=\"Hook Rack\" {...bindHook}></Form.Checkbox>\r\n                    <Form.TextArea label=\"Notes\" />\r\n                </Form>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button positive onClick={() => handleSubmit()}>\r\n                    <Icon name=\"plus\" />\r\n                                Add order\r\n          </Button>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    );\r\n});\r\n","import React, { FC } from \"react\";\r\nimport { Card } from \"semantic-ui-react\";\r\n\r\nexport const BusinessCard: FC = (props) => {\r\n    return (\r\n        <div>\r\n            <Card.Content>\r\n                <Card.Header>Company Name</Card.Header>\r\n                <Card.Meta>Company Meta</Card.Meta>\r\n                <Card.Description>\r\n                    Phone number, email\r\n                </Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n\r\n            </Card.Content>\r\n        </div>\r\n    );\r\n}","import React, { Component } from \"react\";\n\nimport { StatusControl } from \"./components/StatusControl\";\n\nimport { Button, Container, Table, Icon, Menu, Label, Header, Popup } from \"semantic-ui-react\"\n\nimport { observer } from \"mobx-react\";\n\nimport state, { EPriority, IOrder } from \"./state/state\";\nimport { OrderModal } from \"./components/OrderModal\";\nimport { BusinessCard } from \"./components/BusinessCard\";\n\nexport function getPriorityString(priority: EPriority) {\n    switch (priority) {\n        case EPriority.WaitOn:\n            return \"Wait On\"\n        case EPriority.Loading:\n            return \"Loading\";\n        case EPriority.Pickups:\n            return \"Pickups\";\n        case EPriority.Shipping:\n            return \"Shipping\";\n        case EPriority.GetOut:\n            return \"Get Out\";\n        case EPriority.None:\n            return \"None\";\n    }\n}\n\n@observer\nclass App extends Component {\n\n    orderRows(orders: IOrder[]) {\n        return orders.map((order, index) => {\n            return <Table.Row negative={new Date() > (order.dateEnd as Date)} key={index}>\n                <Table.Cell>{order.priority == EPriority.WaitOn ? <Label color=\"blue\" ribbon>{order.id}</Label> : order.id}</Table.Cell>\n\n                <Table.Cell>\n                    <Label basic>{order.tag}</Label><Popup\n                        on=\"click\"\n                        position=\"right center\"\n                        trigger={<a style={{ cursor: \"pointer\" }}>{order.company}</a>}\n                    >\n                        <BusinessCard />\n                    </Popup>\n                </Table.Cell>\n                <Table.Cell>{getPriorityString(order.priority)}</Table.Cell>\n                <Table.Cell>{order.pounds}</Table.Cell>\n                <Table.Cell>{order.dateEnd?.toDateString()}</Table.Cell>\n                <Table.Cell textAlign=\"right\"><StatusControl order={order} /></Table.Cell>\n            </Table.Row>\n        });\n    }\n\n    completedOrders() {\n\n        if (state.completedOrders.length <= 0) return;\n\n        return (\n            <div>\n                <Header as=\"h3\">\n                    Completed Orders\n                </Header>\n\n                <Table compact color=\"green\">\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>Id</Table.HeaderCell>\n                            <Table.HeaderCell>Company</Table.HeaderCell>\n                            <Table.HeaderCell>Priority</Table.HeaderCell>\n                            <Table.HeaderCell>Pounds (lb)</Table.HeaderCell>\n                            <Table.HeaderCell>Date Promised</Table.HeaderCell>\n                            <Table.HeaderCell textAlign=\"right\">Status</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {this.orderRows(state.completedOrders)}\n                    </Table.Body>\n                </Table>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div style={{ marginTop: \"32px\" }}>\n                <Container>\n                    <Menu pointing>\n                        <Menu.Item active><Icon name=\"tasks\" />Orders</Menu.Item>\n                        <Menu.Item><Icon name=\"address card\" />Companies</Menu.Item>\n                        <Menu.Menu position=\"right\">\n                            <Menu.Item>Employee 012</Menu.Item>\n                            <Menu.Item><Icon name=\"log out\" />Logout</Menu.Item>\n                        </Menu.Menu>\n                    </Menu>\n                    <Button.Group floated=\"right\">\n                        <Button primary onClick={() => state.orderModelOpen = true}>\n                            <Icon name=\"plus\" />\n                                New order\n                            </Button>\n                    </Button.Group>\n\n                    <Header as=\"h3\">\n                        Open Orders\n                    </Header>\n                    <Table compact>\n                        <Table.Header>\n                            <Table.Row>\n                                <Table.HeaderCell>Id</Table.HeaderCell>\n                                <Table.HeaderCell>Company</Table.HeaderCell>\n                                <Table.HeaderCell>Priority</Table.HeaderCell>\n                                <Table.HeaderCell>Pounds (lb)</Table.HeaderCell>\n                                <Table.HeaderCell>Date Promised</Table.HeaderCell>\n                                <Table.HeaderCell textAlign=\"right\">Status</Table.HeaderCell>\n                            </Table.Row>\n                        </Table.Header>\n                        <Table.Body>\n                            {this.orderRows(state.openOrders)}\n                        </Table.Body>\n                    </Table>\n                    {this.completedOrders()}\n                </Container>\n                <OrderModal open={state.orderModelOpen} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won\"t work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let\"s check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It\"s the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can\"t reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"semantic-ui-css/semantic.min.css\"\n\nimport state from \"./state/state\";\n\nstate.mock();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}